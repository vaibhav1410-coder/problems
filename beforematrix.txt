class Solution{
    public:
    vector<vector<int>> computeBeforeMatrix(int N, int M, vector<vector<int>> after){
        // Code here
        int i,j;
       for(i=N-1;i>=0;i--)
       {
           for(j=M-1;j>=0;j--)
           {
               if(i)
               {
                   after[i][j]-=after[i-1][j];
               }
               if(j)
               {
                   after[i][j]-=after[i][j-1];
               }
               if(i&&j)
               {
                   after[i][j]+=after[i-1][j-1];
               }
           }
       }
           return after;
       
    }
};

// { Driver Code Starts.
int main(){
    int t;
    cin>>t;
    while(t--){
        int N, M;
        cin>>N>>M; 
        vector<vector<int>> after(N,vector<int>(M));
        for(int i=0;i<N;i++){
            for(int j=0;j<M;j++){
                cin>>after[i][j];
            }
        } 
        Solution obj;
        vector<vector<int>> before=obj.computeBeforeMatrix(N,M,after); 
        for(int i=0;i<before.size();i++){
            for(int j=0;j<before[i].size();j++){
                cout<<before[i][j]<<' ';
            } 
            cout<<endl;
        }
    }
}  // } Driver Code Ends

O n*m
O 1-space